name: Build and Deploy DOS Monitor

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, pgsql, pdo_pgsql, gd, exif, fileinfo, curl, zip, pcntl, bcmath, soap, bz2, calendar, dom, enchant, ffi, ftp, gettext, gmp, imap, ldap, mysqli, odbc, opcache, pcntl, pdo_odbc, pspell, shmop, snmp, sockets, sysvmsg, sysvsem, sysvshm, tidy, xmlreader, xmlrpc, xmlwriter, xsl, zend_opcache
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Dependencies
      run: |
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        npm ci

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create Database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -ppassword -e "CREATE DATABASE IF NOT EXISTS laravel_test;"

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: root
        DB_PASSWORD: password
      run: vendor/bin/phpunit

    - name: Build assets
      run: npm run build

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, pgsql, pdo_pgsql, gd, exif, fileinfo, curl, zip, pcntl, bcmath, soap, bz2, calendar, dom, enchant, ffi, ftp, gettext, gmp, imap, ldap, mysqli, odbc, opcache, pcntl, pdo_odbc, pspell, shmop, snmp, sockets, sysvmsg, sysvsem, sysvshm, tidy, xmlreader, xmlrpc, xmlwriter, xsl, zend_opcache

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Dependencies
      run: |
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --optimize-autoloader
        npm ci

    - name: Build assets for production
      run: npm run build

    - name: Create deployment package
      run: |
        # Remove development files
        rm -rf node_modules
        rm -rf tests
        rm -rf .git
        rm -rf .github
        rm -f .env.example
        rm -f .gitignore
        rm -f .gitattributes
        rm -f README.md
        rm -f DOS_MONITOR_README.md
        rm -f SETUP_SUMMARY.md
        rm -f test_api.py
        rm -f test_api.sh
        rm -f dos_metrics_sender.py
        
        # Create deployment archive
        tar -czf dos-monitor-deployment.tar.gz .

    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: dos-monitor-deployment
        path: dos-monitor-deployment.tar.gz
        retention-days: 30

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: dos-monitor-deployment

    - name: Extract deployment package
      run: tar -xzf dos-monitor-deployment.tar.gz

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Stop current application
          sudo systemctl stop dos-monitor || true
          
          # Backup current deployment
          sudo cp -r /var/www/dos-monitor /var/www/dos-monitor.backup.$(date +%Y%m%d_%H%M%S) || true
          
          # Create deployment directory
          sudo mkdir -p /var/www/dos-monitor
          
          # Copy new files
          sudo cp -r * /var/www/dos-monitor/
          
          # Set permissions
          sudo chown -R www-data:www-data /var/www/dos-monitor
          sudo chmod -R 755 /var/www/dos-monitor
          sudo chmod -R 777 /var/www/dos-monitor/storage
          sudo chmod -R 777 /var/www/dos-monitor/bootstrap/cache
          
          # Install production dependencies
          cd /var/www/dos-monitor
          composer install --no-dev --optimize-autoloader
          
          # Generate application key
          php artisan key:generate --force
          
          # Run migrations
          php artisan migrate --force
          
          # Clear caches
          php artisan config:clear
          php artisan cache:clear
          php artisan view:clear
          php artisan route:clear
          
          # Restart services
          sudo systemctl restart dos-monitor
          sudo systemctl restart nginx
          
          echo "Deployment completed successfully!"

  notify:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      if: always()