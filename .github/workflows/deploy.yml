name: Deploy DOS Monitor Dashboard

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development

env:
  PHP_VERSION: '8.4'
  NODE_VERSION: '18'

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: dos_monitor_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, curl, zip
        coverage: none

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-interaction

    - name: Install Node.js dependencies
      run: npm ci

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Create SQLite database
      run: |
        touch database/database.sqlite
        php artisan migrate --force

    - name: Build assets
      run: npm run build

    - name: Run tests
      run: php artisan test

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, curl, zip

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-interaction --optimize-autoloader --no-dev

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Deploy to VPS via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Navigate to project directory
          cd /var/www/dos-monitor
          
          # Pull latest changes
          git pull origin main
          
          # Install PHP dependencies
          composer install --prefer-dist --no-interaction --optimize-autoloader --no-dev
          
          # Install Node.js dependencies and build assets
          npm ci
          npm run build
          
          # Set proper permissions
          sudo chown -R www-data:www-data /var/www/dos-monitor
          sudo chmod -R 755 /var/www/dos-monitor
          sudo chmod -R 775 /var/www/dos-monitor/storage
          sudo chmod -R 775 /var/www/dos-monitor/bootstrap/cache
          
          # Run migrations
          php artisan migrate --force
          
          # Clear caches
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear
          php artisan cache:clear
          
          # Restart services
          sudo systemctl restart nginx
          sudo systemctl restart php8.4-fpm

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, curl, zip

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-interaction --optimize-autoloader --no-dev

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /var/www/dos-monitor-staging
          git pull origin main
          composer install --prefer-dist --no-interaction --optimize-autoloader --no-dev
          npm ci
          npm run build
          sudo chown -R www-data:www-data /var/www/dos-monitor-staging
          sudo chmod -R 755 /var/www/dos-monitor-staging
          sudo chmod -R 775 /var/www/dos-monitor-staging/storage
          sudo chmod -R 775 /var/www/dos-monitor-staging/bootstrap/cache
          php artisan migrate --force
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear
          php artisan cache:clear
          sudo systemctl restart nginx
          sudo systemctl restart php8.4-fpm

  deploy-docker:
    name: Deploy with Docker
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/dos-monitor:latest
          ${{ secrets.DOCKER_USERNAME }}/dos-monitor:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Railway
      uses: railway/deploy@v1.0.0
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: dos-monitor

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging, deploy-docker, deploy-railway, deploy-vercel]
    if: always()

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

    - name: Notify Discord
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        status: ${{ job.status }}
        title: DOS Monitor Dashboard Deployment
        description: |
          **Environment:** ${{ github.event.inputs.environment || 'production' }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Status:** ${{ job.status }}
      if: always()